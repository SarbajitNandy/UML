# PynSource Version 1.2
{'type':'meta', 'info1':'Lorem ipsum dolor sit amet, consectetur adipiscing elit is latin. Comments are saved.'}
{'type':'umlshape', 'id':'( Interface )   Iterator<E>', 'x':207, 'y':12, 'width':311, 'height':92, 'attrs': '', 'meths': 'Iterator<T> iterator();|default void forEach(Consumer< ? super T>);|default Spliterator<T> spliterator();'}
{'type':'umlshape', 'id':'( Interface )     Collection<T>', 'x':202, 'y':379, 'width':320, 'height':379, 'attrs': '', 'meths': 'int size();|boolean isEmpty();|boolean contains(Object);|Iterator<T> iterator();|Object[] toArray();|<T> T[] toArray(T[]);|boolean add(T);|boolean remove(Object);|boolean containsAll(Collection<?> );|boolean addAll ( Collection<? extends T> );|boolean removeAll( Collection<?>);|boolean retainAll(Collection<?>);|void clear();|boolean equals(Object);|int hashCode();||// Default |<T> T[] toArray(IntFunction<T[]>)|boolean removeIf(Predicate<? super T>)|Stream<T> stream();|Stream<T> parallelStream();||// @Override| Spliterator<T> spliterator'}
{'type':'umlshape', 'id':'( Interface )   List<T>', 'x':185, 'y':827, 'width':353, 'height':319, 'attrs': '', 'meths': 'T get( int);|T set(int, T element);|void add( int, T element);|T remove(int);|int indexOf(Object);|int lastIndexOf( Object);|ListIterator<T> listIterator();|ListIterator<T> listIterator(int);|List<E> subList(int, int );||static <T> List<T> of();|static <T> List<T> of (T);|static <T> List<T> of (T, T);|static <T> List<T> of (Collection< ? extends T>);|||||// Default ||void replaceAll( UnaryOperator<T> )|void sort(Comparator<? super E>)||// @Override |default Spliterator<T> spliterator();'}
{'type':'umlshape', 'id':'( Abstract Class )   AbstractCollection<T>', 'x':729, 'y':878, 'width':430, 'height':119, 'attrs': 'private static final int MAX_ARRAY_SIZE', 'meths': '//private |static <T> T[] finishToArray(T[], Iterator<?>)|static int hugeCapacity(int);'}
{'type':'umlshape', 'id':'( Abstract class) AbstractList<T> ', 'x':708, 'y':1103, 'width':472, 'height':194, 'attrs': 'protected transient int modCount;', 'meths': 'protected void removeRange(int ,int);|Private void rangeCheckForAdd(int );|private String outOfBoundMsg(int); ||// inner Class,  Static| RandomAccessSpliterator<T> implements Spliterator<T>;|//private  innerclass, static |SubList<T> extends AbstractList<T>;|RandomAccessSubList<T> extends SubList<T> implements RandomAccess;'}
{'type':'umlshape', 'id':'( Class )    ArrayList<T> ', 'x':204, 'y':1352, 'width':311, 'height':464, 'attrs': '// private, static, final|long serialVersionUID;|int DEFAULT_CAPACITY;|Object[] EMPTY_ELEMENTDATA;|Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA;|int MAX_ARRAY_SIZE;||//private| int size||// Transient |Object[] elementData;', 'meths': '//public |void trimToSize();|void ensureCapacity(int);|int size();|boolean isEmpty();|boolean contains(Object);|int indexOf(Object);|int lastIndexOf(Object);||// Default|int indexOfRange(Object,int,int);|int lastIndexOfRange(Object,int,int);||//private |Object[] grow(int);|Object[] grow();|int newCapacity(int);|static int hugeCapacity(int);||###Many More Are There. ###'}
{'type':'edge', 'id':'( Interface )     Collection<T>_to_( Interface )   Iterator<E>', 'source':'( Interface )     Collection<T>', 'target':'( Interface )   Iterator<E>', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Interface )   List<T>_to_( Interface )     Collection<T>', 'source':'( Interface )   List<T>', 'target':'( Interface )     Collection<T>', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Abstract Class )   AbstractCollection<T>_to_( Interface )     Collection<T>', 'source':'( Abstract Class )   AbstractCollection<T>', 'target':'( Interface )     Collection<T>', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Abstract class) AbstractList<T> _to_( Abstract Class )   AbstractCollection<T>', 'source':'( Abstract class) AbstractList<T> ', 'target':'( Abstract Class )   AbstractCollection<T>', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Abstract class) AbstractList<T> _to_( Interface )   List<T>', 'source':'( Abstract class) AbstractList<T> ', 'target':'( Interface )   List<T>', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Class )    ArrayList<T> _to_( Abstract class) AbstractList<T> ', 'source':'( Class )    ArrayList<T> ', 'target':'( Abstract class) AbstractList<T> ', 'uml_edge_type': 'generalisation'}
{'type':'edge', 'id':'( Class )    ArrayList<T> _to_( Interface )   List<T>', 'source':'( Class )    ArrayList<T> ', 'target':'( Interface )   List<T>', 'uml_edge_type': 'generalisation'}
